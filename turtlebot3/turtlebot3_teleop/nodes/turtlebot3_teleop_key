#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
import sys, select, os
if os.name == 'nt':
  import msvcrt, time
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
        timeout = 0.1
        startTime = time.time()
        while(1):
            if msvcrt.kbhit():
                if sys.version_info[0] >= 3:
                    return msvcrt.getch().decode()
                else:
                    return msvcrt.getch()
            elif time.time() - startTime > timeout:
                return ''

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot3_teleop')
    pub1 = rospy.Publisher('/tb3_0/cmd_vel', Twist, queue_size=10)
    pub2 = rospy.Publisher('/tb3_1/cmd_vel', Twist, queue_size=10)
    pub3 = rospy.Publisher('/tb3_2/cmd_vel', Twist, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "burger")

    status1, target_linear_vel1, target_angular_vel1, control_linear_vel1, control_angular_vel1 = 0, 0.0, 0.0, 0.0, 0.0
    status2, target_linear_vel2, target_angular_vel2, control_linear_vel2, control_angular_vel2 = 0, 0.0, 0.0, 0.0, 0.0
    status3, target_linear_vel3, target_angular_vel3, control_linear_vel3, control_angular_vel3 = 0, 0.0, 0.0, 0.0, 0.0


    try:
        print(msg)
        while not rospy.is_shutdown():
            key = getKey()
            if key == 'w' :
                target_linear_vel1 = checkLinearLimitVelocity(target_linear_vel1 + LIN_VEL_STEP_SIZE)
                status1 = status1 + 1
                print('robot1:' + str(vels(target_linear_vel1,target_angular_vel1)))
            elif key == 'x' :
                target_linear_vel1 = checkLinearLimitVelocity(target_linear_vel1 - LIN_VEL_STEP_SIZE)
                status1 = status1 + 1
                print('robot1:' + str(vels(target_linear_vel1,target_angular_vel1)))
            elif key == 'a' :
                target_angular_vel1 = checkAngularLimitVelocity(target_angular_vel1 + ANG_VEL_STEP_SIZE)
                status1 = status1 + 1
                print('robot1:' + str(vels(target_linear_vel1,target_angular_vel1)))
            elif key == 'd' :
                target_angular_vel1 = checkAngularLimitVelocity(target_angular_vel1 - ANG_VEL_STEP_SIZE)
                status1 = status1 + 1
                print('robot1:' + str(vels(target_linear_vel1,target_angular_vel1)))
            # elif key == ' ' or key == 's' :
            elif key == 's' :
                target_linear_vel1   = 0.0
                control_linear_vel1  = 0.0
                target_angular_vel1  = 0.0
                control_angular_vel1 = 0.0
                print('robot1:' + str(vels(target_linear_vel1,target_angular_vel1)))
            elif key == 'u' :
                target_linear_vel2 = checkLinearLimitVelocity(target_linear_vel2 + LIN_VEL_STEP_SIZE)
                status2 = status2 + 1
                print('robot2:' + str(vels(target_linear_vel2,target_angular_vel2)))
            elif key == 'm' :
                target_linear_vel2 = checkLinearLimitVelocity(target_linear_vel2 - LIN_VEL_STEP_SIZE)
                status2 = status2 + 1
                print('robot2:' + str(vels(target_linear_vel2,target_angular_vel2)))
            elif key == 'h' :
                target_angular_vel2 = checkAngularLimitVelocity(target_angular_vel2 + ANG_VEL_STEP_SIZE)
                status2 = status2 + 1
                print('robot2:' + str(vels(target_linear_vel2,target_angular_vel2)))
            elif key == 'k' :
                target_angular_vel2 = checkAngularLimitVelocity(target_angular_vel2 - ANG_VEL_STEP_SIZE)
                status2 = status2 + 1
                print('robot2:' + str(vels(target_linear_vel2,target_angular_vel2)))
            # elif key == ' ' or key == 's' :
            elif key == 'j' :
                target_linear_vel2   = 0.0
                control_linear_vel2  = 0.0
                target_angular_vel2  = 0.0
                control_angular_vel2 = 0.0
                print('robot2:' + str(vels(target_linear_vel2,target_angular_vel2)))
            elif key == '8' :
                target_linear_vel3 = checkLinearLimitVelocity(target_linear_vel3 + LIN_VEL_STEP_SIZE)
                status3 = status3 + 1
                print('robot3:' + str(vels(target_linear_vel3,target_angular_vel3)))
            elif key == '2' :
                target_linear_vel3 = checkLinearLimitVelocity(target_linear_vel3 - LIN_VEL_STEP_SIZE)
                status3 = status3 + 1
                print('robot3:' + str(vels(target_linear_vel3,target_angular_vel3)))
            elif key == '4' :
                target_angular_vel3 = checkAngularLimitVelocity(target_angular_vel3 + ANG_VEL_STEP_SIZE)
                status3 = status3 + 1
                print('robot3:' + str(vels(target_linear_vel3,target_angular_vel3)))
            elif key == '6' :
                target_angular_vel3 = checkAngularLimitVelocity(target_angular_vel3 - ANG_VEL_STEP_SIZE)
                status3 = status3 + 1
                print('robot3:' + str(vels(target_linear_vel3,target_angular_vel3)))
            # elif key == ' ' or key == 's' :
            elif key == '5' :
                target_linear_vel3   = 0.0
                control_linear_vel3  = 0.0
                target_angular_vel3  = 0.0
                control_angular_vel3 = 0.0
                print('robot3:' + str(vels(target_linear_vel3,target_angular_vel3)))
            else:
                if (key == '\x03'):
                    break

            # if status == 20 :
            #     print(msg)
            #     status = 0

            twist1 = Twist()
            control_linear_vel1 = makeSimpleProfile(control_linear_vel1, target_linear_vel1, (LIN_VEL_STEP_SIZE/2.0))
            twist1.linear.x = control_linear_vel1; twist1.linear.y = 0.0; twist1.linear.z = 0.0
            control_angular_vel1 = makeSimpleProfile(control_angular_vel1, target_angular_vel1, (ANG_VEL_STEP_SIZE/2.0))
            twist1.angular.x = 0.0; twist1.angular.y = 0.0; twist1.angular.z = control_angular_vel1
            pub1.publish(twist1)

            twist2 = Twist()
            control_linear_vel2 = makeSimpleProfile(control_linear_vel2, target_linear_vel2, (LIN_VEL_STEP_SIZE/2.0))
            twist2.linear.x = control_linear_vel2; twist2.linear.y = 0.0; twist2.linear.z = 0.0
            control_angular_vel2 = makeSimpleProfile(control_angular_vel2, target_angular_vel2, (ANG_VEL_STEP_SIZE/2.0))
            twist2.angular.x = 0.0; twist2.angular.y = 0.0; twist2.angular.z = control_angular_vel2
            pub2.publish(twist2)

            twist3 = Twist()
            control_linear_vel3 = makeSimpleProfile(control_linear_vel3, target_linear_vel3, (LIN_VEL_STEP_SIZE/2.0))
            twist3.linear.x = control_linear_vel3; twist3.linear.y = 0.0; twist3.linear.z = 0.0
            control_angular_vel3 = makeSimpleProfile(control_angular_vel3, target_angular_vel3, (ANG_VEL_STEP_SIZE/2.0))
            twist3.angular.x = 0.0; twist3.angular.y = 0.0; twist3.angular.z = control_angular_vel3
            pub3.publish(twist3)

    except:
        print(e)

    finally:
        twist1 = Twist()
        twist1.linear.x = 0.0; twist1.linear.y = 0.0; twist1.linear.z = 0.0
        twist1.angular.x = 0.0; twist1.angular.y = 0.0; twist1.angular.z = 0.0
        pub1.publish(twist1)

        twist2 = Twist()
        twist2.linear.x = 0.0; twist2.linear.y = 0.0; twist2.linear.z = 0.0
        twist2.angular.x = 0.0; twist2.angular.y = 0.0; twist2.angular.z = 0.0
        pub1.publish(twist2)

        twist3 = Twist()
        twist3.linear.x = 0.0; twist3.linear.y = 0.0; twist3.linear.z = 0.0
        twist3.angular.x = 0.0; twist3.angular.y = 0.0; twist3.angular.z = 0.0
        pub1.publish(twist3)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
